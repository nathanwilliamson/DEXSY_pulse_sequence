########################################################
#                 DEXSY_pp.mac
## This macro was used to acquire rapid exchange datasets in Prospa V 3.22 in Williamson, Ravin, et al., eLife (2019)
# 90 - delay - 180 - delay - 90 - storage - 90 - delay - 180 - delay - CPMG acquisiton
# Nathan Williamson April 2018
#making it possible to call as a single scan
# Prospa V3.22
#
# a1 ... amplitude of 90 pulse
# a2 ... amplitude of 180 pulse
# p1 ... phase of first 90 pulse
# p2 ... phase of first 180 pulse
# p3 ... phase of 90 storage pulse
# p4 ... phase of 90 end storage pulse
# p5 ... phase of second 180 pulse
# p6 ... phase of CPMG 180 pulses
# d1 ... width of RF pulses
# d3 ... delay between CPMG 180 and acquisition
# d4 ... delay between acquisition start and next CPMG 180 
# d5 ... tau1--tau of the first spin echo. This will be varied in the inner loop.
# d7 ... tau2--tau of the second spin echo. This will be varied in the outer loop.
# d8 ... tau2 + TE/2. will vary with d7
# w1 ... mixing time
# n1 ... nrEchoes--number of echos to collect
# n2 ... nrPnts--number of data points to collect per echo
#
########################################################



procedure(pulse_program,dir,mode)


# Interface description (name, label, x, y, ctrlType, varType)
   interface = ["b1Freq",      "B1 Frequency (MHz)",   "0","0",    "tbwv",   "freq",
               "repTime",      "Repetition time (ms)", "0","1.6",   "tbwv",   "float,[20,1e8]",

               "90Amplitude",  "90 amplitude (dB)",    "1","0",     "tb",     "float,[-72,-6]",
               "180Amplitude", "180 amplitude (dB)",   "1","1",     "tb",     "pulseamp",
               "pulseLength",  "Pulse length (us)",    "1","2",     "tb",     "float,[1,500]",

               "echoTime",     "Echotime (us)",        "2","0",     "tb",     "sdelay",
               "nrEchoes",     "Number of echoes",     "2","1",     "tb",     "integer,[1,16000]",
               "echoShift",    "Echo shift (us)",      "2","2",     "tb",     "float,[-20,20]",
               "gradient",     "Gradient (kHz/mm)",    "2","4",     "tbw",    "float",

               "tau1",       "tau1 (ms)",         "3","1",     "tb",     "float,[0.001,100]",

               "tau2",       "tau2 (ms)",         "4","1",     "tb",     "float,[0.001,100]",

               "MixingTime",       "mixing time (ms)",         "1","4",     "tb",     "float,[0.001,10000]"]

  tabs = ["Pulse sequence","Acquisition","File Settings"]

# Relationships between pulse-sequence and GUI parameters
   relationships = ["a1 = 90Amplitude",
                    "a2 = 180Amplitude",
                    "d1 = pulseLength",
                    "d3 = echoTime/2-acqTime*500-d1/2+rxLat+echoShift",
                    "d4 = echoTime-d1-pgo-d3",
                    "d5 = 1000*tau1-d1-pgo",
                    "d7 = 1000*tau2-d1-pgo", 
                    "d8 = 1000*tau2+echoTime/2-d1-pgo",
                    "w1 = 1000*MixingTime",
                    "n1 = nrEchoes",
                    "n2 = nrPnts",
                    "totPnts = nrEchoes",
                    "totTime = nrEchoes*echoTime"]

# These parameters will be changed between experiments
   variables = [""]  

# x and y spacing between controls
   dim = [155,26]

# Pulse sequence
   initpp(dir) # Reset internal parameter list

   cleardata(64000)

   pulse(mode,a1,p1,d1)    # 90 pulse
   delay(d5)               # tau1
   pulse(mode,a2,p2,d1)    # 180 pulse
   delay(d5)               # tau1

   pulse(mode,a1,p3,d1)    # 90 storage pulse
   wait(w1)               # mixing time
   pulse(mode,a1,p4,d1)    # 90 end storage pulse


   delay(d7)               # tau2
   pulse(mode,a2,p5,d1)    # 180 pulse
   delay(d8)               # tau2+ TE/2

   loop(l1,n1)
      pulse(mode,a2,p6,d1)        # 180 internal pulse
      delay(d3)                   # 180 - acq delay
      acquire("integrate",n2,d4)      # Acquire echo and wait. "integrate" means that all points collected are added together and the result stored in the next memory location.
   endloop(l1)

   lst = endpp() # Return parameter list


  phaseList = [0,2,0,2,0,2,0,2;
               1,3,1,3,1,3,1,3;
               0,0,2,2,0,0,2,2;
               0,0,0,0,2,2,2,2;
               1,1,1,1,3,3,3,3;
               1,1,1,1,1,1,1,1;
               2,0,0,2,0,2,2,0]


endproc(lst,tabs,interface,relationships,variables,dim,phaseList)
